# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Users {
  id: ID!
  first_name: String!
  last_name: String!
  gender: String
  status: Status!
  created_at: DateTime!
  updated_at: DateTime!
}

enum Status {
  ACTIVE
  INACTIVE
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Query {
  findFirstUsers(where: UsersWhereInput, orderBy: [UsersOrderByWithRelationInput!], cursor: UsersWhereUniqueInput, take: Int, skip: Int, distinct: [UsersScalarFieldEnum!]): Users!
  findUniqueUsers(where: UsersWhereUniqueInput!): Users!
  findManyUsers(where: UsersWhereInput, orderBy: [UsersOrderByWithRelationInput!], cursor: UsersWhereUniqueInput, take: Int, skip: Int, distinct: [UsersScalarFieldEnum!]): [Users!]!
  groupByUsers(where: UsersWhereInput, orderBy: [UsersOrderByWithAggregationInput!], by: [UsersScalarFieldEnum!]!, having: UsersScalarWhereWithAggregatesInput, take: Int, skip: Int): [UsersGroupBy!]!
  aggregateUsers(where: UsersWhereInput, orderBy: [UsersOrderByWithRelationInput!], cursor: UsersWhereUniqueInput, take: Int, skip: Int): AggregateUsers!
}

input UsersWhereInput {
  AND: [UsersWhereInput!]
  OR: [UsersWhereInput!]
  NOT: [UsersWhereInput!]
  id: IntFilter
  first_name: StringFilter
  last_name: StringFilter
  gender: StringNullableFilter
  created_at: StringFilter
  updated_at: StringFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input NestedIntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input UsersOrderByWithRelationInput {
  id: SortOrder
  first_name: SortOrder
  last_name: SortOrder
  gender: SortOrder
  created_at: SortOrder
  updated_at: SortOrder
}

enum SortOrder {
  asc
  desc
}

input UsersWhereUniqueInput {
  id: Int
}

enum UsersScalarFieldEnum {
  id
  first_name
  last_name
  gender
  created_at
  updated_at
}

type UsersGroupBy {
  id: Int!
  first_name: String!
  last_name: String!
  gender: String
  created_at: String!
  updated_at: String!
  _count: UsersCountAggregate
  _avg: UsersAvgAggregate
  _sum: UsersSumAggregate
  _min: UsersMinAggregate
  _max: UsersMaxAggregate
}

type UsersCountAggregate {
  id: Int!
  first_name: Int!
  last_name: Int!
  gender: Int!
  created_at: Int!
  updated_at: Int!
  _all: Int!
}

type UsersAvgAggregate {
  id: Float
}

type UsersSumAggregate {
  id: Int
}

type UsersMinAggregate {
  id: Int
  first_name: String
  last_name: String
  gender: String
  created_at: String
  updated_at: String
}

type UsersMaxAggregate {
  id: Int
  first_name: String
  last_name: String
  gender: String
  created_at: String
  updated_at: String
}

input UsersOrderByWithAggregationInput {
  id: SortOrder
  first_name: SortOrder
  last_name: SortOrder
  gender: SortOrder
  created_at: SortOrder
  updated_at: SortOrder
  _count: UsersCountOrderByAggregateInput
  _avg: UsersAvgOrderByAggregateInput
  _max: UsersMaxOrderByAggregateInput
  _min: UsersMinOrderByAggregateInput
  _sum: UsersSumOrderByAggregateInput
}

input UsersCountOrderByAggregateInput {
  id: SortOrder
  first_name: SortOrder
  last_name: SortOrder
  gender: SortOrder
  created_at: SortOrder
  updated_at: SortOrder
}

input UsersAvgOrderByAggregateInput {
  id: SortOrder
}

input UsersMaxOrderByAggregateInput {
  id: SortOrder
  first_name: SortOrder
  last_name: SortOrder
  gender: SortOrder
  created_at: SortOrder
  updated_at: SortOrder
}

input UsersMinOrderByAggregateInput {
  id: SortOrder
  first_name: SortOrder
  last_name: SortOrder
  gender: SortOrder
  created_at: SortOrder
  updated_at: SortOrder
}

input UsersSumOrderByAggregateInput {
  id: SortOrder
}

input UsersScalarWhereWithAggregatesInput {
  AND: [UsersScalarWhereWithAggregatesInput!]
  OR: [UsersScalarWhereWithAggregatesInput!]
  NOT: [UsersScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  first_name: StringWithAggregatesFilter
  last_name: StringWithAggregatesFilter
  gender: StringNullableWithAggregatesFilter
  created_at: StringWithAggregatesFilter
  updated_at: StringWithAggregatesFilter
}

input IntWithAggregatesFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntWithAggregatesFilter
  _count: NestedIntFilter
  _avg: NestedFloatFilter
  _sum: NestedIntFilter
  _min: NestedIntFilter
  _max: NestedIntFilter
}

input NestedIntWithAggregatesFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntWithAggregatesFilter
  _count: NestedIntFilter
  _avg: NestedFloatFilter
  _sum: NestedIntFilter
  _min: NestedIntFilter
  _max: NestedIntFilter
}

input NestedFloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatFilter
}

input StringWithAggregatesFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedStringFilter
  _max: NestedStringFilter
}

input NestedStringWithAggregatesFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedStringFilter
  _max: NestedStringFilter
}

input StringNullableWithAggregatesFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _min: NestedStringNullableFilter
  _max: NestedStringNullableFilter
}

input NestedStringNullableWithAggregatesFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _min: NestedStringNullableFilter
  _max: NestedStringNullableFilter
}

input NestedIntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

type AggregateUsers {
  _count: UsersCountAggregate
  _avg: UsersAvgAggregate
  _sum: UsersSumAggregate
  _min: UsersMinAggregate
  _max: UsersMaxAggregate
}

type Mutation {
  createUsers(data: UsersCreateInput!): Users
  createManyUsers(data: [UsersCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput
  updateUsers(data: UsersUpdateInput!, where: UsersWhereUniqueInput!): Users
  updateManyUsers(data: UsersUpdateManyMutationInput!, where: UsersWhereInput): AffectedRowsOutput
  upsertUsers(where: UsersWhereUniqueInput!, create: UsersCreateInput!, update: UsersUpdateInput!): Users
  deleteUsers(where: UsersWhereUniqueInput!): Users
  deleteManyUsers(where: UsersWhereInput): AffectedRowsOutput
}

input UsersCreateInput {
  first_name: String!
  last_name: String!
  gender: String
  created_at: String!
  updated_at: String!
}

type AffectedRowsOutput {
  count: Int!
}

input UsersCreateManyInput {
  id: Int
  first_name: String!
  last_name: String!
  gender: String
  created_at: String!
  updated_at: String!
}

input UsersUpdateInput {
  first_name: StringFieldUpdateOperationsInput
  last_name: StringFieldUpdateOperationsInput
  gender: NullableStringFieldUpdateOperationsInput
  created_at: StringFieldUpdateOperationsInput
  updated_at: StringFieldUpdateOperationsInput
}

input StringFieldUpdateOperationsInput {
  set: String
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

input UsersUpdateManyMutationInput {
  first_name: StringFieldUpdateOperationsInput
  last_name: StringFieldUpdateOperationsInput
  gender: NullableStringFieldUpdateOperationsInput
  created_at: StringFieldUpdateOperationsInput
  updated_at: StringFieldUpdateOperationsInput
}